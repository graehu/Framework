#include "gSdl.h"
//Lets go through these functions picking out what's good and what's not.



int gSdl::init()
{
  m_windowSurface = SDL_GetVideoSurface();
  SDL_SetColorKey(m_windowSurface, SDL_SRCCOLORKEY | SDL_RLEACCEL, SDL_MapRGB(m_windowSurface->format, 0xff, 0x00, 0xff));
  return 0;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int gSdl::update()
{
  return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//this is how a an image is blited to a surface
int gSdl::blitImage(int _imageID, rect _source, rect _destination)
{
  //you can use image->w to get the width of the image.
  SDL_Surface* image = SDL_DisplayFormat(&m_images[_imageID]);
  SDL_Rect source, destination;

  //image space
  source.x = _source.m_x;
  source.y = _source.m_y;
  source.w = _source.m_w;
  source.h = _source.m_h;

  //screen space
  destination.x = _destination.m_x;
  destination.y = _destination.m_y;
  destination.w = _destination.m_w;
  destination.h = _destination.m_h;

  //image successfully blitted to the screen surface. flip to render.
  SDL_BlitSurface(image, &source, m_windowSurface, &destination);
  SDL_FreeSurface(image);
  //SDL_UpdateRects(m_windowSurface, 1, &destination);

  return 0;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int gSdl::loadImage(char* _fileName)
{

  SDL_Surface* temp;
  temp = SDL_LoadBMP(_fileName);

  if (temp == NULL)
    {
      printf("Unable to load bitmap: %s\n", SDL_GetError());
      return 1;
    }
  else m_images.push_back(*temp);

  return 0;
}




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


int gSdl::unloadImage(int _imageID){return 0;}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




int gSdl::render()
{

  SDL_Flip(m_windowSurface);

  return 0;

} //this'll have flipping the buffer within




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




int gSdl::shutdown()
{
  //delete any and all resources before ending the program with this function

  //might want to think about a way to delete all the gObjects that could have been created by this point.
  //not sure if its actually nessisary to be honest

  return 0;

} //shutsdown the graphics engine, probably called in the destructor or something


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


graphics* graphics::graphicsFactory()
{
  return (graphics*)new gSdl;
}
