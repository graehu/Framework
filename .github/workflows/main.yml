# This is a basic workflow to help you get started with Actions

name: Framework CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
    paths:
      - "*.h"
      - "*.hpp"
      - "*.c"
      - "*.cc"
      - "*.cpp"
      - "*.py"
      - ".github/workflows/main.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_samples:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}
      # Setup python 3.10
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.10'
          architecture: 'x64'
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Checkout submodules
        shell: bash
        run: |
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
          # Install xorg-dev libgl1-mesa-dev clang-11
      - name: Install Dependencies
        run: sudo apt-get update -qq && sudo apt-get install -y -qq xorg-dev libavcodec-dev libgl1-mesa-dev clang-11 g++-10 libavformat-dev libavcodec-dev libswresample-dev libswscale-dev libavutil-dev libx264-dev
      # Compilep libs
      - name: Build Libs
        run: python build.py libs
        
      - name: Build rc_sample
        if: ${{ always() }}
        run: python build.py rc_sample
          
      # - name: Build net_physics_sample
      #   if: ${{ always() }}
      #   run: python build.py net_physics_sample
          
      - name: Build param_sample
        if: ${{ always() }}
        run: python build.py param_sample
          
      - name: Build log_sample
        if: ${{ always() }}
        run: python build.py log_sample
          
      # - name: Build mpeg_sample
      #   if: ${{ always() }}
      #   run: python build.py mpeg_sample
